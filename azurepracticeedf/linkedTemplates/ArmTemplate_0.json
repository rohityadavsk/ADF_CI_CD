{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "azurepracticeedf"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureDatabricks1_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'AzureDatabricks1'"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dbsa735.dfs.core.windows.net/"
		},
		"AzureDatabricks1_properties_typeProperties_existingClusterId": {
			"type": "string",
			"defaultValue": "0911-162107-cvp4xggn"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pl_git')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDatabricks1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-1240290788517822.2.azuredatabricks.net",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('AzureDatabricks1_accessToken')]"
					},
					"existingClusterId": "[parameters('AzureDatabricks1_properties_typeProperties_existingClusterId')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_automate_project')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If staging path or staging table",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Truncate Target and Error Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(toLower(pipeline().parameters.Is_Source_File_or_Table),'file')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Variable_Staging_Table",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Staging_Path",
										"value": {
											"value": "@pipeline().parameters.Config_Staging_File_Path_Or_Table",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "get_latest_staging_path",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/Users/22bca10860@cuchd.in/Full_Automate_Scenario/Get Staging File Path",
										"baseParameters": {
											"Staging_File_Pattern": {
												"value": "@pipeline().parameters.Staging_File_Pattern",
												"type": "Expression"
											},
											"Staging_Folder_Path": {
												"value": "@pipeline().parameters.Staging_Parent_Folder_Path",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureDatabricks1",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Variable_Staging_Path",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "get_latest_staging_path",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Staging_Path",
										"value": {
											"value": "@activity('get_latest_staging_path').output.runOutput",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Insert_into_config_table",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "If staging path or staging table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "process_dom_id",
											"type": "String",
											"value": {
												"value": "@pipeline().parameters.Config_Process_DOM_ID",
												"type": "Expression"
											},
											"direction": "Input"
										},
										{
											"name": "file_path_or_table",
											"type": "String",
											"value": {
												"value": "@variables('Staging_Path')",
												"type": "Expression"
											},
											"direction": "Input"
										},
										{
											"name": "scenario",
											"type": "String",
											"value": {
												"value": "@pipeline().parameters.Scenario",
												"type": "Expression"
											},
											"direction": "Input"
										},
										{
											"name": "target_table_name",
											"type": "String",
											"value": {
												"value": "@pipeline().parameters.Target_Table_Name",
												"type": "Expression"
											},
											"direction": "Input"
										},
										{
											"name": "exep_table_name",
											"type": "String",
											"value": {
												"value": "@pipeline().parameters.Exep_Table_Name",
												"type": "Expression"
											},
											"direction": "Input"
										},
										{
											"name": "databricks_notebook_name",
											"type": "String",
											"value": {
												"value": "@pipeline().parameters.Databricks_Notebook_Name",
												"type": "Expression"
											},
											"direction": "Input"
										},
										{
											"name": "databricks_notebook_path",
											"type": "String",
											"value": {
												"value": "@pipeline().parameters.Databricks_Notebook_Path",
												"type": "Expression"
											},
											"direction": "Input"
										},
										{
											"name": "sequence",
											"type": "Int64",
											"value": {
												"value": "@pipeline().parameters.Sequence",
												"type": "Expression"
											},
											"direction": "Input"
										},
										{
											"name": "flag",
											"type": "Int64",
											"value": {
												"value": "@pipeline().parameters.Flag",
												"type": "Expression"
											},
											"direction": "Input"
										}
									],
									"type": "Query",
									"text": {
										"value": "INSERT INTO commercial_stg.tower_config_table VALUES (\n    @process_dom_id\n    ,@file_path_or_table\n    ,@scenario\n    ,@target_table_name\n    ,@exep_table_name\n    ,@databricks_notebook_name\n    ,@databricks_notebook_path\n    ,@sequence\n    ,@flag\n)",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Loading_And_Transformation",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Insert_into_config_table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/22bca10860@cuchd.in/Full_Automate_Scenario/Loading and Transformation",
							"baseParameters": {
								"Source_Path": {
									"value": "@variables('Staging_Path')",
									"type": "Expression"
								},
								"Target_Table": {
									"value": "@pipeline().parameters.Target_Table_Name",
									"type": "Expression"
								},
								"Error_Table": {
									"value": "@pipeline().parameters.Exep_Table_Name",
									"type": "Expression"
								},
								"Source_File_or_Table": {
									"value": "@pipeline().parameters.Is_Source_File_or_Table",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Truncate Target and Error Table",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "truncate table commercial_tgt.zartt_art_stg\ntruncate table commercial_exep_tgt.error_zartt_art_stg"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Staging_File_Pattern": {
						"type": "string",
						"defaultValue": "emp"
					},
					"Staging_Parent_Folder_Path": {
						"type": "string",
						"defaultValue": "/dbfs/mnt/dbsa735/adfscenarios/Automated_Project"
					},
					"Config_Process_DOM_ID": {
						"type": "string",
						"defaultValue": "DM0224"
					},
					"Config_Staging_File_Path_Or_Table": {
						"type": "string",
						"defaultValue": "COMMERCIAL_STG.MARA"
					},
					"Scenario": {
						"type": "string",
						"defaultValue": "INSERT"
					},
					"Target_Table_Name": {
						"type": "string",
						"defaultValue": "COMMERCIAL_TGT.ZARTT_ART_STG"
					},
					"Exep_Table_Name": {
						"type": "string",
						"defaultValue": "COMMERCIAL_EXEP_TGT.ERROR_ZARTT_ART_STG"
					},
					"Databricks_Notebook_Name": {
						"type": "string",
						"defaultValue": "NB_DM0224"
					},
					"Databricks_Notebook_Path": {
						"type": "string",
						"defaultValue": "/MNT/DFA"
					},
					"Sequence": {
						"type": "int",
						"defaultValue": 1
					},
					"Flag": {
						"type": "int",
						"defaultValue": 1
					},
					"Is_Source_File_or_Table": {
						"type": "string",
						"defaultValue": "File"
					}
				},
				"variables": {
					"Staging_Path": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-11-27T07:21:30Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_dbricks_nb')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "databricks notebook",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/22bca10860@cuchd.in/Practice/adf connection",
							"baseParameters": {
								"first_name": {
									"value": "@pipeline().parameters.first_name",
									"type": "Expression"
								},
								"Roll_Out_No": {
									"value": "@pipeline().parameters.roll_out",
									"type": "Expression"
								},
								"pipeline_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks1",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"first_name": {
						"type": "string"
					},
					"roll_out": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-11-14T02:40:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/db_sap_dm_dev')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema_name": {
						"type": "string"
					},
					"table_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema_name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adf_scenario_container')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"directory_path": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().directory_path",
							"type": "Expression"
						},
						"fileSystem": "adfscenarios"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Birth",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Department",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_dynamic_file_names')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"file_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().file_name",
							"type": "Expression"
						},
						"folderPath": "get_file_name_dynamically",
						"fileSystem": "adfscenarios"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Dept",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_imp_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "important_file_backup_question",
						"fileSystem": "adfscenarios"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ipl_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "points_table.csv",
						"folderPath": "ipl",
						"fileSystem": "kaggle"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "season",
						"type": "String"
					},
					{
						"name": "rank",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "short_name",
						"type": "String"
					},
					{
						"name": "matchesplayed",
						"type": "String"
					},
					{
						"name": "matcheswon",
						"type": "String"
					},
					{
						"name": "matcheslost",
						"type": "String"
					},
					{
						"name": "noresult",
						"type": "String"
					},
					{
						"name": "matchpoints",
						"type": "String"
					},
					{
						"name": "nrr",
						"type": "String"
					},
					{
						"name": "for",
						"type": "String"
					},
					{
						"name": "against",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_source_imp_files')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"file_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().file_name",
							"type": "Expression"
						},
						"folderPath": "important_file_backup_question",
						"fileSystem": "adfscenarios"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_dynamic_file_name')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get fileNames",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_adf_scenario_container",
								"type": "DatasetReference",
								"parameters": {
									"directory_path": "get_file_name_dynamically"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEachFileName",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get fileNames",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get fileNames').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy All Files To Output",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_dynamic_file_names",
											"type": "DatasetReference",
											"parameters": {
												"file_name": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adf_scenario_container",
											"type": "DatasetReference",
											"parameters": {
												"directory_path": "get_file_name_dynamically/output"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-11-14T06:24:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adf_scenario_container')]",
				"[concat(variables('factoryId'), '/datasets/ds_dynamic_file_names')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_imp_file_backup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get_File_Names",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_adf_scenario_container",
								"type": "DatasetReference",
								"parameters": {
									"directory_path": "important_file_backup_question"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEachFileName",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get_File_Names",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get_File_Names').output.childItems",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(item().name,'imp')",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Copy data1",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "ds_source_imp_files",
														"type": "DatasetReference",
														"parameters": {
															"file_name": {
																"value": "@item().name",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "ds_adf_scenario_container",
														"type": "DatasetReference",
														"parameters": {
															"directory_path": "important_file_backup_question/target_backup"
														}
													}
												]
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "ForEachFileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"check_values": {
						"type": "Array"
					},
					"check_names": {
						"type": "Array"
					},
					"check": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-11-28T02:31:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adf_scenario_container')]",
				"[concat(variables('factoryId'), '/datasets/ds_source_imp_files')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_150_columns')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_ipl_data",
								"type": "DatasetReference"
							},
							"name": "sourcecsv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "db_sap_dm_dev",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey"
						}
					],
					"scriptLines": [
						"source(output(",
						"          season as integer,",
						"          rank as integer,",
						"          name as string,",
						"          short_name as string,",
						"          matchesplayed as integer,",
						"          matcheswon as integer,",
						"          matcheslost as integer,",
						"          noresult as integer,",
						"          matchpoints as integer,",
						"          nrr as double,",
						"          for as string,",
						"          against as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourcecsv",
						"sourcecsv keyGenerate(output(id as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey",
						"surrogateKey sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_ipl_data')]",
				"[concat(variables('factoryId'), '/datasets/db_sap_dm_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_error_rows')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adf_scenario_container",
								"type": "DatasetReference"
							},
							"name": "errorrowsinput"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adf_scenario_container",
								"type": "DatasetReference"
							},
							"name": "errordatesink"
						},
						{
							"dataset": {
								"referenceName": "ds_adf_scenario_container",
								"type": "DatasetReference"
							},
							"name": "errordepartmentsink"
						},
						{
							"dataset": {
								"referenceName": "ds_adf_scenario_container",
								"type": "DatasetReference"
							},
							"name": "goodrecordssink"
						}
					],
					"transformations": [
						{
							"name": "spliterrorandgoodrecords"
						},
						{
							"name": "errorfilenamedatecolumn"
						},
						{
							"name": "errorcolumndepartmentcolumn"
						},
						{
							"name": "goodrecordscolumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Birth as string,",
						"          Name as string,",
						"          Department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> errorrowsinput",
						"errorrowsinput split(isNull(toDate(Birth, 'dd-MMM-yyyy')),",
						"     not(regexMatch(Department, '^[A-Za-z]+$')),",
						"     disjoint: false) ~> spliterrorandgoodrecords@(errordaterecords, errordepartmentrecords, goodrecords)",
						"spliterrorandgoodrecords@errordaterecords derive(file_name = 'error_date_records') ~> errorfilenamedatecolumn",
						"spliterrorandgoodrecords@errordepartmentrecords derive(file_name = 'error_department_records') ~> errorcolumndepartmentcolumn",
						"spliterrorandgoodrecords@goodrecords derive(file_name = 'good records') ~> goodrecordscolumn",
						"errorfilenamedatecolumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Birth as string,",
						"          Name as string,",
						"          Department as string",
						"     ),",
						"     partitionFileNames:['error_date.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> errordatesink",
						"errorcolumndepartmentcolumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Birth as string,",
						"          Name as string,",
						"          Department as string",
						"     ),",
						"     partitionFileNames:['error_dept.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> errordepartmentsink",
						"goodrecordscolumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Birth as string,",
						"          Name as string,",
						"          Department as string",
						"     ),",
						"     partitionFileNames:['good_records.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> goodrecordssink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adf_scenario_container')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_150_columns')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_150_columns_temp1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "truncate_tables_script",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_150_columns",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourcecsv": {},
									"sink1": {
										"schema_name": "commercial_stg",
										"table_name": "points_temp1"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "df_150_columns_temp2",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "df_150_columns_temp1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_150_columns",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourcecsv": {},
									"sink1": {
										"schema_name": "commercial_stg",
										"table_name": "points_temp2"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "truncate_tables_script",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "truncate table commercial_stg.points_temp1;\ntruncate table commercial_stg.points_temp2;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "put temp_data_into_points",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "df_150_columns_temp2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "with cte as(\nselect a.*\n\t  ,b.noresult\n\t  ,b.matchpoints\n\t  ,b.nrr\n\t  ,b.[for]\n\t  ,b.against\nfrom commercial_stg.points_temp1 a\ninner join commercial_stg.points_temp2 b\non a.id=b.id)\n\ninsert into commercial_stg.points\nselect * from cte"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-11-21T02:58:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_150_columns')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_handle_error_rows')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "handle error",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureDataLakeStorage1",
										"type": "LinkedServiceReference"
									},
									"path": "adfscenarios/error_rows_question"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Birth",
											"type": "DateTime",
											"physicalType": "String"
										},
										"sink": {
											"name": "Birth",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Name",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Department",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Department",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_adf_scenario_container",
								"type": "DatasetReference",
								"parameters": {
									"directory_path": {
										"value": "@pipeline().parameters.source_file_path",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adf_scenario_container",
								"type": "DatasetReference",
								"parameters": {
									"directory_path": {
										"value": "@pipeline().parameters.target_file_path_with_file_name",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "df_error_rows",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_error_rows",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"errorrowsinput": {
										"directory_path": {
											"value": "@pipeline().parameters.source_file_path",
											"type": "Expression"
										}
									},
									"errordatesink": {
										"directory_path": "error_rows_question/output"
									},
									"errordepartmentsink": {
										"directory_path": "error_rows_question/output"
									},
									"goodrecordssink": {
										"directory_path": "error_rows_question/output"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"source_file_path": {
						"type": "string",
						"defaultValue": "error_rows_question/error_rows_input.csv"
					},
					"target_file_path_with_file_name": {
						"type": "string",
						"defaultValue": "error_rows_question/good_data.csv"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-11-14T06:24:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adf_scenario_container')]",
				"[concat(variables('factoryId'), '/dataflows/df_error_rows')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		}
	]
}